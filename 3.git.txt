git的功能：
代码回滚、代码合并、版本备份、权限控制、追究责任等。
他能追踪一个项目从诞生到定案的过程、记录项目所有变化，无限制返回、查看特定版本的修情况。
git和svn比较：
git为分布式版本控制（在每个客户端都有一份完整的代码仓库, 可以在每个客户端自行管理）
svn为集中式版本控制（所有的代码都集中在一块, 统一进行管理）

git工作流程：
git clone ->git add .->git commit -m ''(提交到本地仓库)->git push (提交到远程服务器->git pull

git使用经验
每天走之前, 提交一份没有问题的代码到服务器，每天早上来之前, 从服务器拉一份最新的代码到本地再进行开发

git使用方式：命令行、ws这些前端工具。

常用的unix命令：
1. 必学命令
	help [子命令] : 查看某一个具体的子命令的使用方法
2. 常用命令
	- cd path : 将当前路径切换到path路径
	- pwd ：查看当前所在路径
	- ls (-a / -l / -G) :  查看当前文件夹下所有文件及文件夹
	- touch filename1 filename2 ： 创建一个或者多个文件 
	- rm filename : 删除文件
	- cat filename ：查看文件内容
	- less filename ：分页查看文件内容
	- mkdir 文件夹名称 ：创建一个文件夹
	- rmdir 文件夹名称 ：删除一个文件夹
	- mv oldFilePath newFilePath ：移动文件(可借助此命令给文件重命名)
3.vi编辑器：
三种模式：命令行模式、末行模式、输入模式，输入vi就进入命令行模式，输入a或i就到插入模式，接着esc到命令行模式，接着shift+:到末行模式，wq保存并退出，！q强制退出。末行模式esc到命令行模式。

git工作原理：
git有工作区和版本控制库这两个东西，工作区就是文件目录下（除了.git）的就是工作区，版本库就是目录下.git目录，当添加/修改/删除后，git add后先是将添加的文件推送到版本库的暂缓区，git commit 后将添加的文件推送到版本库的分支上，默认是master分支，通过HEAD指针来切换分支。

git本地仓库的搭建：
初始化git init->配置仓库（告诉git你是谁，怎么联系。。。git config user.name "你的名字"  git...email "",配置好了查看这些配置的信息，git config -l）。
git 基本使用：
创建文件并提交：touch 文件 git add  git commit-》修改文件并提交-》删除文件并提交：git rm 文件 。。。
git 日志查看的方式：1）git log  2)git relog  版本号唯一
git 查看文件状态：git status  红色表示文件添加或修改或删除的文件没有被添加到暂缓区，绿色表示文件在暂缓去等待提交。

git版本回退：
如果尚未提交：回退到当前版本：git reset --hard HEAD 
如果提交了：
git reset --hard HEAD^ 重置到上个版本
git reset --hard HEAD~2 重置到往上2个版本
git reset --hard  HEAD@{版本号}七位版本号 重置到指定版本
然后再使用git push --force将本次变更强行推送至服务器。这样在服务器上的对应版本的错误提交也彻底消失了。

共享库分类：远程共享库和本地共享库，远程的就比如GitHub，本地共享库的例子好比如在一个电脑上，有一个共享库，另外有两个文件目录分别在本地共享库拉取提交代码。git clone "c:/user....(本地共享库地址)"，搭建本地共享库mkdir share/cd share/git init --bare。

解决冲突：这个通常我们在使用前最好拉一下代码，否则如果本地文件的版本低于共享库的文件版本, 提交时就会报超时错误，冲突解决：如果俩人在用一个共享库的一个文件，另一个修改提交并且推送，另一个也修改提交推送时就会提升merge，这时就要合并一下代码接着点击merge，这时通常把别人的放在前面，自己的放在后面，接着apply一下，如果没有成功重新推送一下。

配置忽略文件：有些文件对自己有用，对别人没有，就不必上传到服务器了。
就是在当前目录下，touch .gitignore  接着打开这个文件在里面写上要忽略的文件名即可。只能忽略工作区文件，如果已经在暂缓区，则无法忽略。

~~~~~~~~~终于快要结束了，就是git分支
首先如果远程有多个分支，如果是master分支，直接拉，如果是有其他分支，拉取代码命令为：git clone -b dev ssh地址
查看当前分支  git branch -a  ->查看本地分支git branch ->创建分支 git branch 分支名称 ->将创建的分支推送都远程git push origin 分支名称 ->切换分支 git checkout 分支名称 ->删除分支 git branch -d 分支名称 ->删除远程分支 git push origin :分支名称。

~~~~~~~~~你以为完了？再坚持最后一下下
给项目打一个标签，就是打一个版本
git tag -a v1.0 -m "v1.0备份"，接着上传共享库git push origin v1.0

